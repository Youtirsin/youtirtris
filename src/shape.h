#ifndef SHAPES_H
#define SHAPES_H

#include <iostream>

// count of types of shapes
const int SHAPE_CNT           = 7;

// count of types of shape rotations
const int SHAPE_ROTATE_CNT    = 4;

// the size of matrix template which stores the shape
const int SHAPE_TEMP_SIZE     = 5;

// all the shapes
const char SHAPE_TEMPLATES[SHAPE_CNT][SHAPE_ROTATE_CNT][SHAPE_TEMP_SIZE][SHAPE_TEMP_SIZE] = {
  // square
  {
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 1, 1, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 1, 1, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 1, 1, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 1, 1, 0},
      {0, 0, 0, 0, 0}
    }
  },
  // Bar
  {
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 2, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 1, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {1, 1, 2, 1, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 1, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 2, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 1, 2, 1, 1},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
    }
  },
  // L -- to be finished
  {
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 2, 0, 0},
      {0, 0, 1, 1, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 1, 2, 1, 0},
      {0, 1, 0, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 1, 1, 0, 0},
      {0, 0, 2, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 1, 0},
      {0, 1, 2, 1, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
    }
  },
  // L mirrored
  {
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 2, 0, 0},
      {0, 1, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 1, 0, 0, 0},
      {0, 1, 2, 1, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 1, 0},
      {0, 0, 2, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 1, 2, 1, 0},
      {0, 0, 0, 1, 0},
      {0, 0, 0, 0, 0}
    }
  },
  // N
  {
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 1, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 1, 2, 0, 0},
      {0, 0, 1, 1, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 1, 2, 0, 0},
      {0, 1, 0, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 1, 1, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
    }
  },
  // N mirrored
  {
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 0, 1, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 1, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 1, 0, 0, 0},
      {0, 1, 2, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 1, 0},
      {0, 1, 2, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
    }
  },
  // T
  {
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 2, 1, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 1, 2, 1, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 1, 2, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 0}
    },
    {
      {0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 1, 2, 1, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
    }
  },
};
// to put the shape in the right place
const int SHAPE_INIT_POS[SHAPE_CNT][SHAPE_ROTATE_CNT][2] = {
  /* Square */
  {
  {-2, -3},
  {-2, -3},
  {-2, -3},
  {-2, -3}
  },
  /* I */
  {
  {-2, -2},
  {-2, -3},
  {-2, -2},
  {-2, -3}
  },
  /* L */
  {
  {-2, -3},
  {-2, -3},
  {-2, -3},
  {-2, -2}
  },
  /* L mirrored */
  {
  {-2, -3},
  {-2, -2},
  {-2, -3},
  {-2, -3}
  },
  /* N */
  {
  {-2, -3},
  {-2, -3},
  {-2, -3},
  {-2, -2}
  },
  /* N mirrored */
  {
  {-2, -3},
  {-2, -3},
  {-2, -3},
  {-2, -2}
  },
  /* T */
  {
  {-2, -3},
  {-2, -3},
  {-2, -3},
  {-2, -2}
  }
};

// shape class
class Shape {
 public:
  Shape();

  void set_pos(int x_, int y_) { x = x_; y = y_; }

  void move(int mx, int my) { x += mx; y += my; }

  void rotate() { rotation = (rotation + 1) % SHAPE_ROTATE_CNT; }

  // return the state of the position
  // NOTICE: i and j is relative
  int get_block_state(int i, int j) {
    return SHAPE_TEMPLATES[type][rotation][i][j];
  }

  // return the offset needed in the initial position
  std::pair<int, int> get_init_pos() {
    return { SHAPE_INIT_POS[type][rotation][0], SHAPE_INIT_POS[type][rotation][1] };
  }

  // return the absolute position in the board
  std::pair<int, int> get_pos() { return { x, y }; }
  private:

    // shape tpye
    int type;

    // shape rotation type
    int rotation;

    // the absolute position on the board
    int x, y;
};

#endif